import { Mnemonic } from "../src/mnemonic"
import { MnemonicEnglishDictionary } from "../src/mnemonic-english-dictionary"

const mnemonicPhrase = "target trash poet gasp rapid era turtle produce curve clown subway author";
const indexes = new Uint8Array([0x06, 0xef, 0x07, 0x3b, 0x05, 0x39, 0x03, 0x01, 0x05, 0x8f, 0x02, 0x62, 0x07, 0x57, 0x05, 0x5d, 0x01, 0xb2, 0x01, 0x60, 0x06, 0xc1, 0x00, 0x7b]);
const mnemonic = new Mnemonic(indexes); 
const mnemonicNoWords = new Mnemonic(indexes);
const mnemonicPass = "MnemonicSuperPassword1234";

const binSeed = new Uint8Array([
  0x68, 0x28, 0x1e, 0xe8, 0x3e, 0x1f, 0x2b, 0x36, 0x68, 0x6d, 0x81, 0xcb, 0x8c, 0xb4, 0x1e, 0x6e,
  0xc3, 0x52, 0x73, 0xc2, 0xce, 0x99, 0x2f, 0xf2, 0x1d, 0x8d, 0x68, 0xa0, 0x54, 0x6e, 0xe0, 0x46, 
  0x46, 0x67, 0x76, 0x99, 0x22, 0x59, 0xeb, 0xab, 0x9a, 0xc1, 0x29, 0x69, 0x4e, 0xc1, 0x38, 0xd7, 
  0x30, 0xd7, 0xff, 0x7c, 0x3f, 0x09, 0x89, 0x3f, 0x0d, 0x07, 0x92, 0xc2, 0xaf, 0x5e, 0xed, 0xc1
]);

const binSeedWithPass = new Uint8Array([
  0x31, 0x70, 0x76, 0x9b, 0x1d, 0xe7, 0xab, 0xd6, 0xef, 0x2a, 0x47, 0xe4, 0xd1, 0x04, 0x41, 0xca,
  0xfb, 0xe9, 0xa9, 0x99, 0x51, 0xd0, 0x12, 0x71, 0xe2, 0xf3, 0x71, 0x21, 0x80, 0x50, 0x14, 0xf6,
  0x49, 0xe4, 0x99, 0x06, 0x98, 0xc8, 0x18, 0xe9, 0xe0, 0x62, 0x3e, 0x67, 0x4e, 0xc7, 0x93, 0x66,
  0xae, 0xfa, 0xd9, 0xba, 0xbb, 0x39, 0x52, 0x9b, 0x93, 0x66, 0xd6, 0x2b, 0x38, 0xf0, 0x90, 0xfe
]);

mnemonic.fetchBIP39EnglishWordlist();

test('Check Mnemonic functions', () => {
  expect(mnemonic.wordlist).toMatchObject(MnemonicEnglishDictionary.words);
  expect(() => mnemonic.setWordlist(mnemonicPhrase.split(" "))).toThrowError(new Error("Error: The list must contain exactly 2048 entries"));
  expect(() => mnemonic.setWordlist(MnemonicEnglishDictionary.words)).not.toThrowError(new Error("Error: The list must contain exactly 2048 entries"));
  expect(() => mnemonicNoWords.getWords()).toThrowError(new Error("Error: The wordlist must be set first"));
  expect(mnemonic.toMnemonicPhrase()).toEqual(mnemonicPhrase);
  expect(mnemonic.toBinarySeed()).toEqual(binSeed);
  expect(mnemonic.toBinarySeed(mnemonicPass)).toEqual(binSeedWithPass);
});